% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NumComma.R
\name{NumComma_rm}
\alias{NumComma_rm}
\alias{NumComma_rm_str}
\alias{NumComma_add}
\alias{NumComma_add_str}
\title{Numbers and commas}
\usage{
NumComma_rm(num, convert = FALSE, warnig.message = TRUE)

NumComma_rm_str(str)

NumComma_add(x, digit = 3, small.num = 999, warnig.message = TRUE)

NumComma_add_str(str, digit = 3, small.num = 999)
}
\arguments{
\item{num}{Numbers (strings) separated by a comma every three digits.}

\item{convert}{If `TRUE`, will return as numeric. The default value is `FALSE`,
and numeric values are treated as strings.}

\item{warnig.message}{If TRUE, a warning message is displayed when a
non-convertible value is submitted and the input value is returned without
conversion; if FALSE, the warning message is hidden and the value of the
unconvertible value is returned.}

\item{str}{str is a string.}

\item{x}{x is a number or a string of numbers intended.}

\item{digit}{Converts the number of digits greater than the number specified
by `digit` (including the decimal point) to comma-separated numbers only.}

\item{small.num}{Convert only numbers greater than the number specified in
`small.num` (including decimal points) to comma-separated numbers.}
}
\value{
characters or numbers.
}
\description{
`NumComma_rm`, which takes a comma-separated number every three digits as a
string and converts it into a number without a comma. `NumComma_rm_str` is a
function to convert comma-separated numbers in a string into comma-separated
numbers without commas for every three digits while keeping the rest of the
string. While `NumComma_rm` accepts only positive numbers, `NumComma_rm_str`
accepts comma-separated numbers with three digits.
`NumComma_add` is a function that converts a number not containing a comma to
 a comma-separated number every three digits. `NumComma_add_str` is the
 function to convert a number in a string to a comma-separated number every
  three digits.
}
\examples{
NumComma_add(2020)
NumComma_add(c(2019, 2020, 2021))
NumComma_add(c(123456, 1234), digit = 4)
NumComma_add(c(123456, 1234), small.num = 2000)
NumComma_add_str("This year is 2020 and next year is 2021.")
NumComma_add_str("This is 123456, but that's 2020.", digit = 4)
NumComma_rm(c("1,234", "1,234.56", "1,23", "japan"), warnig.message = FALSE)
NumComma_rm(c("1,234", "1,234.56", "1,23", "japan"), convert = TRUE, warnig.message = FALSE)
NumComma_rm_str("This year is 2,020 and next year is 2,021.")
NumComma_rm_str("This year is 2,0,2,0 and next year is 2,021.")
}
